import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

const Dashboard = ({ onLogout }) => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [uploadStatus, setUploadStatus] = useState(null);
  const [processingStatus, setProcessingStatus] = useState(null);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
  const cities = [
    '–ë–∞–ª–∞—à–∏—Ö–∞', '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', '–ñ—É–∫–æ–≤—Å–∫–∏–π', '–ò–≤–∞–Ω—Ç–µ–µ–≤–∫–∞', '–ö–∞–∑–∞–Ω—å',
    '–ö–æ—Ä–æ–ª–µ–≤', '–õ—é–±–µ—Ä—Ü—ã', '–ú—ã—Ç–∏—â–∏', '–ù–æ–≥–∏–Ω—Å–∫', '–ü—É—à–∫–∏–Ω–æ',
    '–†–∞–º–µ–Ω—Å–∫–æ–µ', '–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥', '–§—Ä—è–∑–∏–Ω–æ', '–©–µ–ª–∫–æ–≤–æ', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å'
  ];

  useEffect(() => {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ axios –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
    const token = localStorage.getItem('authToken');
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    }
  }, []);

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file && (file.type === 'application/vnd.ms-excel' || 
                 file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||
                 file.name.endsWith('.xls') || file.name.endsWith('.xlsx'))) {
      setSelectedFile(file);
      setError('');
    } else {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .xls –∏–ª–∏ .xlsx');
      setSelectedFile(null);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file && (file.type === 'application/vnd.ms-excel' || 
                 file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||
                 file.name.endsWith('.xls') || file.name.endsWith('.xlsx'))) {
      setSelectedFile(file);
      setError('');
    } else {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .xls –∏–ª–∏ .xlsx');
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const uploadFile = async () => {
    if (!selectedFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    setUploading(true);
    setError('');
    setSuccess('');
    setUploadStatus('–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
    setProcessingStatus(null);

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await axios.post('/api/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setUploadStatus('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      setSuccess('–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω');
      
      // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (response.data.task_id) {
        trackProcessingStatus(response.data.task_id);
      }
    } catch (err) {
      if (err.response && err.response.data && err.response.data.detail) {
        setError(err.response.data.detail);
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      }
      setUploadStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    } finally {
      setUploading(false);
    }
  };

  const trackProcessingStatus = async (taskId) => {
    const checkStatus = async () => {
      try {
        const response = await axios.get(`/api/status/${taskId}`);
        const status = response.data;
        
        setProcessingStatus(status);
        
        if (status.status === 'completed' || status.status === 'failed') {
          return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(checkStatus, 2000);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }
    };
    
    checkStatus();
  };

  return (
    <div>
      <div className="header">
        <div className="header-content">
          <h1>–î–≤–∞ –≥–æ—Å—Ç—è</h1>
          <div className="header-buttons">
            <Link to="/settings" className="btn btn-secondary">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Link>
            <button onClick={onLogout} className="btn btn-secondary">
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </div>

      <div className="container">
        <div className="card">
          <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</h2>
          
          {error && <div className="error">{error}</div>}
          {success && <div className="success">{success}</div>}
          
          <div 
            className="file-upload-area"
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onClick={() => document.getElementById('file-input').click()}
          >
            <div className="upload-icon">üìÅ</div>
                         <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª Excel (.xls –∏–ª–∏ .xlsx) —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                         <input
               id="file-input"
               type="file"
               accept=".xls,.xlsx"
               onChange={handleFileSelect}
             />
          </div>
          
          {selectedFile && (
            <div style={{ marginTop: '15px' }}>
              <p><strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:</strong> {selectedFile.name}</p>
              <button 
                onClick={uploadFile} 
                className="btn" 
                disabled={uploading}
              >
                {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'}
              </button>
            </div>
          )}
        </div>

        {(uploadStatus || processingStatus) && (
          <div className="card">
            <h2>–í—ã–≤–æ–¥</h2>
            
            {processingStatus && (
              <div>
                {processingStatus.status === 'failed' && processingStatus.error && (
                  <div className="error" style={{ marginTop: '10px' }}>
                    <strong>–û—à–∏–±–∫–∞:</strong> {processingStatus.error}
                  </div>
                )}
                
                {processingStatus.errors && processingStatus.errors.length > 0 && (
                  <div className="status-list">
                    <h4>–û—à–∏–±–∫–∏:</h4>
                    {processingStatus.errors.map((error, index) => (
                      <div key={index} className="status-item status-error">
                        <span>{error.city}</span>
                        <span>{error.message}</span>
                      </div>
                    ))}
                  </div>
                )}
                
                {processingStatus.success && processingStatus.success.length > 0 && (
                  <div className="status-list">
                    <h4>–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</h4>
                    {processingStatus.success.map((city, index) => (
                      <div key={index} className="status-item status-success">
                        <span>{city}</span>
                        <span>‚úÖ</span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard; 